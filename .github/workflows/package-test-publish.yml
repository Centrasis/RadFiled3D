name: Python packaging testing

on: [push]

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      max-parallel: 5
      matrix:
        include:
          - python-version: 3.12
            python-name: cp312
          - python-version: 3.13
            python-name: cp313
    steps:
    - uses: actions/checkout@v4
    - name: Install compiler
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
    - name: Set up Clang
      uses: egor-tensin/setup-clang@v1
      with:
        version: latest
        platform: x64
    - name: Install CMake
      uses: jwlawson/actions-setup-cmake@v1
      with:
        cmake-version: '3.21.3'
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Build RadFiled3D Wheel
      run: |
        python -m pip install setuptools wheel build
        python -m build --wheel --no-isolation
    - name: Lint with flake8
      run: |
        python -m pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Install built wheel ${{ matrix.python-version }}
      run: |
        $whl = Get-ChildItem -Path dist\*.whl | Select-Object -First 1
        python -m pip install $whl.FullName
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-windows-artifact-${{ matrix.python-version }}
        path: dist/*.whl
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
      matrix:
        include:
          - python-version: 3.11
            python-name: cp311
          - python-version: 3.12
            python-name: cp312
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Define CIBW_BUILD variable
      run: |
        PYTHON_VERSION=${{ matrix.python-version }}
        export CIBW_BUILD="${{ matrix.python-name }}-manylinux_x86_64"
    - name: Build RadFiled3D Wheel for glibc 2.28
      uses: pypa/cibuildwheel@v2.22.0
      env:
        CIBW_BUILD_FRONTEND: "build"
        CIBW_ARCHS: "x86_64"
        CIBW_ENVIRONMENT_PASS_LINUX: "GITHUB_REF"
        CIBW_BUILD: "${{ matrix.python-name }}-manylinux_x86_64"
        CIBW_PROJECT_REQUIRES_PYTHON: ">=3.11"
        CIBW_BEFORE_ALL_LINUX: "yum install -y python${{ matrix.python-version }}-devel"
        CIBW_MANYLINUX_X86_64_IMAGE: "manylinux_2_28"
        CIBW_MANYLINUX_PYPY_X86_64_IMAGE: "manylinux_2_28"
      with:
        output-dir: dist
    - name: Install built wheel ${{ matrix.python-version }}
      run: |
        python -m pip install ./dist/*.whl
    - name: Build RadFiled3D Wheel for glibc 2.17
      uses: pypa/cibuildwheel@v2.22.0
      env:
        CIBW_BUILD_FRONTEND: "build"
        CIBW_ARCHS: "x86_64"
        CIBW_ENVIRONMENT_PASS_LINUX: "GITHUB_REF"
        CIBW_BUILD: "${{ matrix.python-name }}-*"
        CIBW_PROJECT_REQUIRES_PYTHON: ">=3.11"
        CIBW_BEFORE_ALL_LINUX: "yum install -y python${{ matrix.python-version }}-devel"
        CIBW_MANYLINUX_X86_64_IMAGE: "manylinux2014"
        CIBW_MANYLINUX_PYPY_X86_64_IMAGE: "manylinux2014"
      with:
        output-dir: dist
    - name: Lint with flake8
      run: |
        python -m pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-linux-artifact-${{ matrix.python-version }}
        path: dist/*.whl
  test-linux:
    strategy:
      max-parallel: 5
      matrix:
        include:
          - python-version: 3.11
            python-name: cp311
          - python-version: 3.12
            python-name: cp312
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    name: Test on Linux ${{ matrix.python-version }}
    needs:
      - build-linux
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-linux-artifact-${{ matrix.python-version }}
          path: dist/
      - name: Install built wheel ${{ matrix.python-version }}
        run: |
          python -m pip install ./dist/*manylinux_2_28_x86_64.whl
      - name: Test with pytest
        run: |
          python -m pip install pytest numpy
          python -m pytest tests/
  test-windows:
    strategy:
      max-parallel: 5
      matrix:
        include:
          - python-version: 3.12
            python-name: cp312
          - python-version: 3.13
            python-name: cp313
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: windows-latest
    name: Test on Windows ${{ matrix.python-version }}
    needs:
      - build-windows
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-windows-artifact-${{ matrix.python-version }}
          path: dist/
      - name: Install built wheel ${{ matrix.python-version }}
        run: |
          $whl = Get-ChildItem -Path dist\*.whl | Select-Object -First 1
          python -m pip install $whl.FullName
      - name: Test with pytest
        run: |
          python -m pip install pytest numpy
          python -m pytest tests/
  publish-linux:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 5
      matrix:
        include:
          - python-version: 3.11
            python-name: cp311
          - python-version: 3.12
            python-name: cp312
    if: startsWith(github.ref, 'refs/tags/')
    name: Publish on Linux ${{ matrix.python-version }}
    needs:
      - test-linux
    environment:
      name: pypi
      url: https://pypi.org/p/RadFiled3D
    permissions:
      id-token: write
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: build-linux-artifact-${{ matrix.python-version }}
          path: dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
  publish-windows:
    strategy:
      max-parallel: 5
      matrix:
        include:
          - python-version: 3.12
            python-name: cp312
          - python-version: 3.13
            python-name: cp313
    runs-on: windows-latest
    if: startsWith(github.ref, 'refs/tags/')
    name: Publish on Windows ${{ matrix.python-version }}
    needs:
      - test-windows
    environment:
      name: pypi
      url: https://pypi.org/p/RadFiled3D
    permissions:
      id-token: write
    steps:
      - name: Configure .pypirc
        run: |
          echo "[distutils]" > ~/.pypirc
          echo "index-servers = pypi RadFiled3D" >> ~/.pypirc
          echo "[pypi]" >> ~/.pypirc
          echo "repository: https://upload.pypi.org/legacy/" >> ~/.pypirc
          echo "username: __token__" >> ~/.pypirc
          echo "password: ${{ secrets.TWINE_PASSWORD }}" >> ~/.pypirc
          echo "[RadFiled3D]" >> ~/.pypirc
          echo "repository: https://upload.pypi.org/legacy/" >> ~/.pypirc
          echo "username: __token__" >> ~/.pypirc
          echo "password: ${{ secrets.TWINE_PASSWORD }}" >> ~/.pypirc
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: build-windows-artifact-${{ matrix.python-version }}
          path: dist/
      - name: Publish to PyPI
        run: |
          $whl = Get-ChildItem -Path dist\*.whl | Select-Object -First 1
          python -m pip install twine
          python -m twine upload --repository RadFiled3D $whl.FullName